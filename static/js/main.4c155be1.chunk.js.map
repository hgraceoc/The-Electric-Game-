{"version":3,"sources":["imgs/football.svg","Components/Home.js","Components/PlayerInput/PlayerInput.js","data/actions.js","Components/PlayerInput/index.js","Components/PlayerPlatform.js","App.js","serviceWorker.js","data/initial.js","data/reducers.js","data/store.js","index.js"],"names":["module","exports","Home","className","src","football","alt","to","PlayerInput","props","pickTeams","players","numberOfPlayers","teams","i","n","length","push","slice","state","playerName","submitted","teamOne","teamTwo","valid","handleChange","bind","handleSubmit","handleSubmitTeams","handleEditPlayers","handleRemovePlayer","handleReset","e","this","setState","currentTarget","value","preventDefault","index","map","player","key","onSubmit","onChange","placeholder","required","disabled","type","onClick","Component","defaultProps","addPlayer","connect","dispatch","removePlayer","PlayerPlatform","App","exact","path","Boolean","window","location","hostname","match","initial","reducer","action","sort","Math","random","shuffle","filter","_","editPlayers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","persistState","ReactDOM","render","StrictMode","reset","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,sC,0MCoB1BC,MAfjB,WAEI,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,QAChB,yBAAKC,IAAKC,IAAUF,UAAU,OAAOG,IAAI,SAEzC,wBAAIH,UAAU,aAAd,kBACA,kBAAC,IAAD,CAAMA,UAAU,WAAWI,GAAG,WAA9B,yB,+CCXJC,E,kDAEF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IA4DVC,UAAY,SAACC,EAASC,GAElB,IADA,IAAIC,EAAQ,GAAIC,EAAI,EAAGC,EAAIJ,EAAQK,OAC5BF,EAAIC,GACPF,EAAMI,KAAKN,EAAQO,MAAMJ,EAAGA,GAAKF,IAErC,OAAOC,GA/DP,EAAKM,MAAQ,CACTC,WAAY,GACZC,WAAW,EACXC,QAAS,GACTC,QAAS,GACTC,OAAO,GAIX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAEpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAEpB,EAAKE,kBAAoB,EAAKA,kBAAkBF,KAAvB,gBAEzB,EAAKG,kBAAoB,EAAKA,kBAAkBH,KAAvB,gBAEzB,EAAKI,mBAAqB,EAAKA,mBAAmBJ,KAAxB,gBAE1B,EAAKK,YAAc,EAAKA,YAAYL,KAAjB,gBAtBJ,E,yDAyBNM,GACTC,KAAKC,SAAS,CAAEd,WAAYY,EAAEG,cAAcC,U,mCAGnCJ,GACTA,EAAEK,iBADU,IAEJjB,EAAea,KAAKd,MAApBC,WACRa,KAAKxB,MAAMkB,aAAaP,GACxBa,KAAKC,SAAS,CAAEd,WAAY,O,wCAGdY,GACdA,EAAEK,iBADe,IAET1B,EAAYsB,KAAKd,MAAjBR,QACRsB,KAAKC,SAAS,CAAEb,WAAW,IAC3BY,KAAKxB,MAAMmB,kBAAkBjB,K,wCAIfqB,GAAI,IACVrB,EAAYsB,KAAKd,MAAjBR,QACRsB,KAAKC,SAAS,CAAEb,WAAW,IAC3BY,KAAKxB,MAAMoB,kBAAkBlB,K,kCAGrBqB,GACRC,KAAKxB,MAAMsB,cACXE,KAAKC,SAAS,CAAEb,WAAW,M,yCAIZW,EAAGM,GAClBL,KAAKxB,MAAMqB,mBAAmBQ,K,+BAaxB,IAAD,OACG3B,EAAYsB,KAAKxB,MAAjBE,QAEAS,EAAea,KAAKd,MAApBC,WACAC,EAAcY,KAAKd,MAAnBE,UAEFR,EAAQoB,KAAKvB,UAAUC,EAAS,GAEhCW,EAAUT,EAAMG,OAAS,GAAKH,EAAM,GAAG0B,KAAI,SAACC,EAAQF,GACtD,OAAO,wBAAIG,IAAKH,GAAQE,MAEtBjB,EAAUV,EAAMG,OAAS,GAAKH,EAAM,GAAG0B,KAAI,SAACC,EAAQF,GACtD,OAAO,wBAAIG,IAAKH,GAAQE,MAU5B,OACI,oCACMnB,EAsDE,KArDA,yBAAKlB,UAAU,mBAEX,yBAAKA,UAAU,QACX,0BAAMuC,SAAUT,KAAKN,cACjB,wBAAIxB,UAAU,SAAd,qBACA,oCAAS,mDAAT,iBAAuD,qDAAvD,mCACA,yBAAKA,UAAU,aACX,2BACIwC,SAAUV,KAAKR,aACfW,MAAOhB,EACPwB,YAAY,sBACZC,UAAQ,KAKI,KAAnBlC,EAAQK,OACL,oCACI,4BACI8B,UAAQ,EACR3C,UAAU,aACV4C,KAAK,UAHT,cAMA,2EAIA,4BACI5C,UAAU,aACV4C,KAAK,UAFT,eAMZ,wBAAI5C,UAAU,cACTQ,EAAQ4B,KAAI,SAACC,EAAQF,GAAT,OACT,oCACI,wBAAIG,IAAKH,EACLnC,UAAU,kBACV,2BACIA,UAAU,eADd,SACmCmC,EAAQ,EAD3C,MAGCE,GAEL,4BACIrC,UAAU,qBACV6C,QAAS,SAAAhB,GAAC,OAAI,EAAKF,mBAAmBE,EAAGM,KAF7C,wBAaxB,yBAAKnC,UAAU,6BACTkB,GAAgC,KAAnBV,EAAQK,OAOnB,KANA,4BACIgC,QAASf,KAAKL,kBACdzB,UAAU,8BACV4C,KAAK,UAHT,qBAUP1B,EACG,oCACI,yBAAKlB,UAAU,cACX,2BAAOA,UAAU,aACb,+BACI,4BACI,wBAAIA,UAAU,SAAd,cAGR,+BACI,4BAAKmB,KAKb,2BAAOnB,UAAU,aACb,+BACI,4BAAI,wBAAIA,UAAU,SAAd,cAER,+BACI,4BAAKoB,MAMjB,yBAAKpB,UAAU,WAUX,4BACI6C,QAASf,KAAKF,YACd5B,UAAU,0BACV4C,KAAK,UAHT,YAUR,yBAAK5C,UAAU,WACX,4BACI6C,QAASf,KAAKF,YACd5B,UAAU,0BACV4C,KAAK,UAHT,gB,GArNEE,aAoO1BzC,EAAY0C,aAAe,CACvB9B,WAAY,IAIDZ,QC3OF2C,EAAY,SAAC/B,GACtB,MAAO,CACH2B,KAAM,aACN3B,eC4BOgC,eAxBU,SAAAjC,GACvB,MAAO,CACHR,QAASQ,EAAMR,QACfW,QAASH,EAAMG,QACfC,QAASJ,EAAMI,QACfH,WAAYD,EAAMC,eAIG,SAAAiC,GACzB,MAAO,CACH1B,aAAc,SAAAP,GAAU,OAAIiC,EAASF,EAAU/B,KAE/CS,kBAAmB,SAAAT,GAAU,OAAIiC,EDL5B,CACHN,KAAM,eACNpC,QCGoDS,KAEtDQ,kBAAmB,SAAAjB,GAAO,OAAI0C,EDdzB,CACHN,KAAM,UACN3B,WCY6C+B,EAAUxC,MAEzDmB,mBAAoB,SAACQ,GAAD,OAAWe,EDHT,SAACf,GACzB,MAAO,CACHS,KAAM,gBACNT,MAAOA,GCA+BgB,CAAahB,KAErDP,YAAa,SAAAZ,GAAK,OAAIkC,EDGjB,CACHN,KAAM,cCCCK,CAA6C5C,GClB3C+C,MATjB,WAEI,OACE,yBAAKpD,UAAU,cACX,kBAAC,EAAD,QCkBKqD,EAfJ,kBACP,kBAAC,IAAD,KACE,oCACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,WAChB,kBAAC,EAAD,UCPUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6BCbSC,EAJC,CACZrD,QAAS,I,eCoDEsD,EAVC,SAAC9C,EAAO+C,GACpB,OAAQA,EAAOnB,MACX,IAAK,aAAc,OA3CT,SAAC5B,EAAO+C,GACtB,OAAO,2BACA/C,GADP,IAEIR,QAAQ,GAAD,mBACAQ,EAAMR,SADN,CAEHuD,EAAO9C,eAsCe+B,CAAUhC,EAAO+C,GAC3C,IAAK,UAAW,OAdV,SAAC/C,EAAO+C,GAClB,OAAO,2BACA/C,GADP,IAEIR,QAAQ,GAAD,mBACAQ,EAAMR,QAAQwD,MAAK,kBAAMC,KAAKC,SAAW,OADzC,CAEHH,EAAOvD,YASY2D,CAAQnD,EAAO+C,GACtC,IAAK,gBAAiB,OA7BT,SAAC/C,EAAD,OAAUmB,EAAV,EAAUA,MAAV,mBAAC,eACfnB,GADc,IAEjBR,QAASQ,EAAMR,QAAQ4D,QAAO,SAACC,EAAG1D,GAAJ,OAAUA,IAAMwB,OA2BbgB,CAAanC,EAAM+C,GAChD,IAAK,eAAgB,OApCT,SAAC/C,GACjB,MAAQ,CACNR,QAASQ,EAAMR,SAkCe8D,CAAYtD,GACxC,IAAK,QAAS,OAvBX,eACA6C,GAuBH,QAAS,OAAO7C,IC7ClBuD,EACJd,OAAOe,sCAAwCC,IAOlCC,EANDC,YACZb,EACAD,EACAU,EAAiBK,QCDnBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUL,MAAQA,GAChB,kBAAC,EAAD,CACA1B,UAAW,kBAAM0B,EAAMxB,SAAS,CAAEN,KAAM,gBACxC0B,YAAa,kBAAMI,EAAMxB,SAAS,CAAEN,KAAM,kBAC1CoC,MAAO,kBAAMN,EAAMxB,SAAS,CAAEN,KAAM,WACpCuB,QAAS,kBAAMO,EAAMxB,SAAS,CAAEN,KAAM,aACtCO,aAAc,kBAAMuB,EAAMxB,SAAS,CAAEN,KAAM,uBAI/CqC,SAASC,eAAe,SJ6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4c155be1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/football.ade08109.svg\";","import React from 'react';\nimport football from '../../src/imgs/football.svg';\nimport { Link } from \"react-router-dom\";\n\n\nfunction Home() {\n\n    return (\n      <div className=\"App\">\n        <header className=\"home\">\n          <img src={football} className=\"logo\" alt=\"logo\" />\n          \n          <h1 className=\"homeTitle\">Team Selector!</h1>\n          <Link className=\"homeLink\" to=\"/select\">Name Your Players!</Link>\n  \n        </header>\n      </div>\n    );\n  }\n  \n  export default Home;","import React, { Component } from \"react\";\n\nclass PlayerInput extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            playerName: '',\n            submitted: false,\n            teamOne: [],\n            teamTwo: [],\n            valid: false,\n        };\n        //store playerName input locally \n\n        this.handleChange = this.handleChange.bind(this);\n\n        this.handleSubmit = this.handleSubmit.bind(this);\n\n        this.handleSubmitTeams = this.handleSubmitTeams.bind(this);\n\n        this.handleEditPlayers = this.handleEditPlayers.bind(this);\n\n        this.handleRemovePlayer = this.handleRemovePlayer.bind(this);\n\n        this.handleReset = this.handleReset.bind(this);\n    }\n\n    handleChange(e) {\n        this.setState({ playerName: e.currentTarget.value })\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        const { playerName } = this.state;\n        this.props.handleSubmit(playerName)\n        this.setState({ playerName: \"\" })\n    }\n\n    handleSubmitTeams(e) {\n        e.preventDefault();\n        const { players } = this.state;\n        this.setState({ submitted: true });\n        this.props.handleSubmitTeams(players)\n        //change state of submitted to true, so as to show and hide appropriate elements \n    }\n\n    handleEditPlayers(e) {\n        const { players } = this.state;\n        this.setState({ submitted: false })\n        this.props.handleEditPlayers(players)\n    }\n\n    handleReset(e) {\n        this.props.handleReset()\n        this.setState({ submitted: false })\n        //take user back to empty form \n    }\n\n    handleRemovePlayer(e, index) {\n        this.props.handleRemovePlayer(index)\n    }\n\n    //helper function to split players into two equal teams of 5\n    pickTeams = (players, numberOfPlayers) => {\n        let teams = [], i = 0, n = players.length;\n        while (i < n) {\n            teams.push(players.slice(i, i += numberOfPlayers));\n        }\n        return teams;\n    }\n\n\n    render() {\n        const { players } = this.props;\n        //player inputs are stored in local state, but the players array we are accessing from the store\n        const { playerName } = this.state;\n        const { submitted } = this.state;\n\n        const teams = this.pickTeams(players, 5)\n\n        const teamOne = teams.length > 0 && teams[0].map((player, index) => {\n            return <h3 key={index}>{player}</h3>\n        })\n        const teamTwo = teams.length > 1 && teams[1].map((player, index) => {\n            return <h3 key={index}>{player}</h3>\n        })\n\n\n        //displayed below:\n        // reset button - take user back to empty form (appears on both the player input form, and the team tables view)\n        // edit players button - appears when form is submitted \n        // playerName form  - user inputs 10 player names \n        // add player button renders new player to list\n        // randomise team button - submits form, which then hides form and displays two team tables \n        return (\n            <>\n                {!submitted ? (\n                    <div className=\"playerInputForm\">\n\n                        <div className=\"form\">\n                            <form onSubmit={this.handleSubmit}>\n                                <h1 className=\"title\">Name Your Players</h1>\n                                <p>Enter <strong>10 Player Names</strong> & Then Click <strong>'Randomise Teams'</strong> To Generate Two Random Teams..</p>\n                                <div className=\"formGroup\">\n                                    <input\n                                        onChange={this.handleChange}\n                                        value={playerName}\n                                        placeholder=\"Enter Player Name..\"\n                                        required>\n                                    </input>\n\n                                </div>\n\n                                {players.length === 10 ? (\n                                    <>\n                                        <button\n                                            disabled\n                                            className=\"formButton\"\n                                            type=\"submit\">\n                                            Add Player\n                                        </button>\n                                        <p>Click 'Randomise Teams' To Pick Your Teams!</p>\n                                    </>\n                                ) : (\n\n                                        <button\n                                            className=\"formButton\"\n                                            type=\"submit\">\n                                            Add Player\n                                        </button>)}\n                            </form>\n                            <ul className=\"playerList\">\n                                {players.map((player, index) =>\n                                    <>\n                                        <li key={index}\n                                            className=\"playerListItem\">\n                                            <label\n                                                className=\"playerLabel\">Player{index + 1} :\n                                            </label>\n                                            {player}\n                                        </li>\n                                        <button\n                                            className=\"removePlayerButton\"\n                                            onClick={e => this.handleRemovePlayer(e, index)}>Remove Player\n                                    </button>\n                                    </>\n                                )}\n                            </ul>\n                        </div>\n                    </div>\n                ) : null}\n\n\n\n                <div className=\"submitTeamButtonContainer\">\n                    {!submitted && players.length === 10 ? (\n                        <button\n                            onClick={this.handleSubmitTeams}\n                            className=\"formButton submitTeamButton\"\n                            type=\"submit\">\n                            Randomise Teams!\n                        </button>\n                    ) : null}\n                </div>\n\n\n                {submitted ? (\n                    <>\n                        <div className=\"teamTables\">\n                            <table className=\"teamTable\">\n                                <thead>\n                                    <tr>\n                                        <th className=\"title\">Team One</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    <tr>{teamOne}</tr>\n                                </tbody>\n                            </table>\n\n\n                            <table className=\"teamTable\">\n                                <thead>\n                                    <tr><th className=\"title\">Team Two</th></tr>\n                                </thead>\n                                <tbody>\n                                    <tr>{teamTwo}</tr>\n                                </tbody>\n                            </table>\n                        </div>\n\n\n                        <div className=\"buttons\">\n\n                            {/* <button\n                                onClick={this.handleEditPlayers}\n                                className=\"formButton editButton\">\n                                Edit Players\n                            </button> \n                            \n                            //Need to fix bug in Edit Players function which adds an extra empty player to the list.. */}\n\n                            <button\n                                onClick={this.handleReset}\n                                className=\"formButton resetButton1\"\n                                type=\"submit\">\n                                Reset!\n                            </button>\n\n                        </div>\n                    </>\n                ) :\n                    <div className=\"buttons\">\n                        <button\n                            onClick={this.handleReset}\n                            className=\"formButton resetButton1\"\n                            type=\"submit\">\n                            Reset!\n            </button>\n                    </div>\n\n                }\n            </>\n        )\n    }\n}\n\n\nPlayerInput.defaultProps = {\n    playerName: ''\n}\n\n\nexport default PlayerInput;\n","export const addPlayer = (playerName) => {\n    return {\n        type: \"ADD_PLAYER\",\n        playerName,\n    };\n};\n\nexport const shuffle = (playerName) => {\n    return {\n        type: \"SHUFFLE\",\n        playerName,\n    };\n};\n\nexport const editPlayers = (players) => {\n    return {\n        type: \"EDIT_PLAYERS\",\n        players,\n    };\n};\n\nexport const removePlayer = (index) => {\n    return {\n        type: \"REMOVE_PLAYER\",\n        index: index,\n    };\n};\n\nexport const reset = () => {\n    return {\n        type: \"RESET\",\n    };\n};","import { connect } from \"react-redux\";\n\nimport PlayerInput from \"./PlayerInput\";\n//import the component that we want to wrap\n\nimport { addPlayer, reset, shuffle, removePlayer, editPlayers } from \"../../data/actions\";\n\n const mapStateToProps = state => {\n  return {\n      players: state.players,\n      teamOne: state.teamOne,\n      teamTwo: state.teamTwo,\n      playerName: state.playerName,\n  };\n\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n      handleSubmit: playerName => dispatch(addPlayer(playerName)),\n\n      handleEditPlayers: playerName => dispatch(editPlayers(playerName)),\n\n      handleSubmitTeams: players => dispatch(shuffle(addPlayer(players))),   \n\n      handleRemovePlayer: (index) => dispatch(removePlayer(index)),\n\n      handleReset: state => dispatch(reset(state)),    \n  };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlayerInput);\n\n","import React from 'react';\n\nimport PlayerInput from \"./PlayerInput\";\n\nfunction PlayerPlatform() {\n\n    return (\n      <div className=\"background\">\n          <PlayerInput></PlayerInput>\n      </div>\n    );\n  }\n  \n  export default PlayerPlatform;","import React from 'react';\nimport {\n  HashRouter as Router,\n  Route,\n} from \"react-router-dom\";\nimport './App.css';\n\nimport Home from \"./Components/Home\";\nimport PlayerPlatform from './Components/PlayerPlatform';\n\n\nconst App =() => (\n    <Router>\n      <>\n        <Route exact path=\"/\">\n          <Home></Home>\n        </Route>\n\n        <Route exact path=\"/select\">\n          <PlayerPlatform></PlayerPlatform>\n        </Route>\n      </>\n    </Router>\n\n  );\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nconst initial = {\n    players: [],\n};\n\nexport default initial;","import initial from \"./initial\";\n\n//add new player input to the store\nconst addPlayer = (state, action) => {\n    return {\n        ...state,\n        players: [\n            ...state.players,\n            action.playerName,\n        ]\n    }\n}\n\nconst editPlayers = (state) =>  { \n    return  { \n      players: state.players,\n    } \n  };\n\nconst removePlayer = (state, { index }) => ({\n    ...state,\n    players: state.players.filter((_, i) => i !== index)\n});\n\n\n//reducer to reset the form, when user clicks reset button\nconst reset = (state) => {\n    return {\n        ...initial,\n    }\n}\n\n//helper function to shuffle teams - call function on the data returned when the form is submitted \nlet shuffle = (state, action) => {\n    return {\n        ...state,\n        players: [\n            ...state.players.sort(() => Math.random() - 0.5),\n            action.players,\n        ]\n    }\n}\n\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case \"ADD_PLAYER\": return addPlayer(state, action);\n        case \"SHUFFLE\": return shuffle(state, action);\n        case \"REMOVE_PLAYER\": return removePlayer(state,action);\n        case \"EDIT_PLAYERS\": return editPlayers(state,action);\n        case \"RESET\": return reset(state, action);\n        default: return state;\n    }\n}\nexport default reducer;","import { createStore, compose,} from \"redux\";\nimport persistState from \"redux-localstorage\";\n\nimport initial from \"../data/initial\";\nimport reducer from \"../data/reducers\";\n\nconst composeEnhancers =\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  reducer,\n  initial,\n  composeEnhancers(persistState())\n);\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from \"./data/store\";\n\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={ store }>\n      <App\n      addPlayer={() => store.dispatch({ type: \"ADD_PLAYER\" })}\n      editPlayers={() => store.dispatch({ type: \"EDIT_PLAYERS\" })}\n      reset={() => store.dispatch({ type: \"RESET\" })}\n      shuffle={() => store.dispatch({ type: \"SHUFFLE\" })}\n      removePlayer={() => store.dispatch({ type: \"REMOVE_PLAYER\" })}\n      />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}